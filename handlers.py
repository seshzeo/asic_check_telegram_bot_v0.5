from telegram.ext import ContextTypes
from telegram import Update
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from utils import deserialize_miners, check_valid_user, change_watchdog_values, WatchDogValues


miners = deserialize_miners()

menu_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton('–°—Ç–∞—Ç–∞', callback_data='state')],
    [InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—ã–π –∞—Å–∏–∫', callback_data='reboot0')],
    [InlineKeyboardButton('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∞—Å–∏–∫', callback_data='reboot1')]
    ])


async def check_asic_notification(context):
    # –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Å–∏–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    # –ï—Å–ª–∏ —Ö–µ—à—Ä–µ–π—Ç –Ω–∏–∂–µ –ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - 
    # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏

    tag = 'üî¥'
    
    for id, asics in miners.items():
        error_text = ''
        for asic in asics:
            name = asic.get_name()
            state = asic.get_state()
            # print(state)

            if 'error' in state:
                error_text += f"{tag} –ü—Ä–æ–±–ª–µ–º–∞: {name} {state['error']}\n"
            if state:
                if state['hash5s'] <= asic.min_hash:
                    error_text += f'{tag} –ù–∏–∑–∫–∏–π —Ö–µ—à—Ä–µ–π—Ç: {name} {state["hash5s"]} {state["units"]}\n'
                for temps in list(state['temp1'] + state['temp2'] + state['temp3']):
                    if temps >= asic.max_temp:
                        error_text += f'{tag} –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temps} ‚ÑÉ\n'
            

        if error_text:
            print(error_text) #debug
            await context.bot.send_message(
                    chat_id = id,
                    text = error_text
                )


async def change_min_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if '–Ω–µ –Ω–∞–π–¥–µ–Ω' in (message := check_valid_user(update.effective_chat.id)):
        await update.message.reply_text(message)
        return
    
    await context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = change_watchdog_values(update, context, miners, WatchDogValues.HASHRATE),
            reply_markup=menu_keyboard
        )
    
    
async def change_max_temp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if '–Ω–µ –Ω–∞–π–¥–µ–Ω' in (message := check_valid_user(update.effective_chat.id)):
        await update.message.reply_text(message)
        return
    
    await context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = change_watchdog_values(update, context, miners, WatchDogValues.TEMP),
            reply_markup=menu_keyboard
        )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if '–Ω–µ –Ω–∞–π–¥–µ–Ω' in (message := check_valid_user(update.effective_chat.id)):
        await update.message.reply_text(message)
        return

    query = update.callback_query
    button_data = query.data
    status = ''
    asics = miners[str(update.effective_chat.id)]

    if button_data == 'state':
        await stat(update=update, context=context)
    elif 'reboot' in button_data:
        # try:
            index = int(button_data[-1]) # –≤–∑—è–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É—é –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
            status = asics[index].reboot()
            answer = ''
            if status == 200:
                answer = f'{asics[index]} –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å'
            elif status >= 400 and status < 500:
                answer = f'{asics[index]} –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞. '
            elif status >= 500 and status < 600:
                answer = f'{asics[index]} –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. '
            await query.answer(answer)
        # except IndexError as e:
        #     print('Error rebooting ASIC') #debug
        #     await query.answer(f'üî¥ –ò–Ω–¥–µ–∫—Å –∞—Å–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. Error message: {e}')
    else:
        await context.bot.send_message(
            chat_id = update.effective_chat.id,
            text = 'üî¥ Invalid command',
            reply_markup=menu_keyboard
        )


async def say_hi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' in (message := check_valid_user(update.effective_chat.id)):
        await update.message.reply_text(message)
        return

    print('Hi from bot') #debug
    await context.bot.send_message(
        chat_id = update.effective_chat.id,
        text = 'Hi from bot',
        reply_markup=menu_keyboard
    )


async def stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if '–Ω–µ –Ω–∞–π–¥–µ–Ω' in (message := check_valid_user(update.effective_chat.id)):
        await update.message.reply_text(message)
        return
    
    asics = miners[str(update.effective_chat.id)]

    parsed_info = [ asic.get_message() for asic in asics ]
    print(*parsed_info) #debug
    await context.bot.send_message(
        chat_id = update.effective_chat.id,
        text = ' '.join(parsed_info),
        reply_markup=menu_keyboard
    )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
    if update and isinstance(update, Update):
        chat = update.effective_chat
        if chat:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç
            await context.bot.send_message(
                chat_id=chat.id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}"
            )